name: Python package

on: [push]

jobs:
  cache-containers:
    name: Cache Container Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Check for cached container images
        id: cache-singularity
        uses: actions/cache@v3
        with:
          path: ~/.apptainer/cache
          key: ${{ runner.os }}-apptainer-cache-v2-${{ hashFiles('seqnado/workflow/snakefile_*', 'seqnado/workflow/rules/*.smk') }}
          restore-keys: |
            ${{ runner.os }}-apptainer-cache-v2-
            ${{ runner.os }}-apptainer-cache-

      - name: Setup Apptainer runtime
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.4

      - name: Configure Sylabs Cloud remote
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        shell: bash
        run: |
          apptainer remote add --no-login SylabsCloud cloud.sylabs.io
          apptainer remote use SylabsCloud

      - name: Create container cache directory
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ~/.apptainer/cache

      - name: Pre-pull container images
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        shell: bash
        env:
          APPTAINER_CACHEDIR: "$HOME/.apptainer/cache"
          APPTAINER_TMPDIR: "/tmp"
        run: |
          echo "Pre-pulling Apptainer container images..."
          
          # Configure Apptainer
          apptainer cache clean --force || true
          
          # List of containers to pre-pull
          containers=(
            "oras://ghcr.io/alsmith151/seqnado_pipeline:latest"
            "oras://ghcr.io/alsmith151/seqnado_ml_cpu:latest"
            "docker://quay.io/biocontainers/macs2:2.1.1.20160309--py27r3.3.1_1"
            "library://asmith151/plotnado/plotnado:latest"
            "library://asmith151/lanceotron/lanceotron-mcc:latest"
          )
          
          for container in "${containers[@]}"; do
            echo "Pulling container: $container"
            # Pull without saving to explicit path - let Apptainer cache the layers
            apptainer pull --disable-cache=false "$container" || echo "Failed to pull $container, continuing..."
            # Remove the .sif file since we only want the cache
            rm -f *.sif
          done
          
          echo "Apptainer cache contents:"
          ls -la ~/.apptainer/cache/ || echo "No cache directory"
          du -sh ~/.apptainer/cache/* 2>/dev/null || echo "No cache files"

      - name: Verify container cache
        shell: bash
        run: |
          echo "Verifying container cache..."
          echo "Contents of ~/.apptainer/cache:"
          ls -la ~/.apptainer/cache/ || echo "Cache directory doesn't exist"
          
          echo "Cache subdirectories:"
          find ~/.apptainer/cache -type d 2>/dev/null | head -10 || echo "No cache subdirectories found"
          
          # Check cache size
          cache_size=$(du -sh ~/.apptainer/cache 2>/dev/null | cut -f1 || echo "0")
          echo "Total cache size: $cache_size"
          
          if [ -d ~/.apptainer/cache ] && [ "$(ls -A ~/.apptainer/cache 2>/dev/null)" ]; then
            echo "✅ Container cache populated successfully"
          else
            echo "⚠️  Warning: No container cache found"
          fi

  test-pipelines:
    name: Test Pipeline - ${{ matrix.assay }}
    needs: [cache-containers]
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        assay: ["atac", "chip-rx", "chip", "rna-rx", "rna", "snp", 'cat', 'meth', 'mcc']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Conda environment and install SeqNado
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: testing.yml
          miniforge-version: latest
          use-mamba: true

      - name: Install SeqNado package
        shell: bash -el {0}
        run: |
          pip install .
          
          # Verify installation
          python -c "import seqnado; print(f'SeqNado installed at: {seqnado.__file__}')"
          which seqnado-init
          python -c "import pytest; print(f'pytest version: {pytest.__version__}')"

      - name: Setup Apptainer runtime
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.4

      - name: Restore cached container images
        id: cache-singularity
        uses: actions/cache@v3
        with:
          path: ~/.apptainer/cache
          key: ${{ runner.os }}-apptainer-cache-v2-${{ hashFiles('seqnado/workflow/snakefile_*', 'seqnado/workflow/rules/*.smk') }}
          restore-keys: |
            ${{ runner.os }}-apptainer-cache-v2-
            ${{ runner.os }}-apptainer-cache-

      - name: Setup Apptainer runtime
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.4

      - name: Verify cached containers are available
        shell: bash
        run: |
          echo "Verifying cached containers are available for pipeline tests:"
          echo "Contents of ~/.apptainer/cache:"
          ls -la ~/.apptainer/cache/ || echo "No cache directory found"
          
          echo "All .sif files in ~/.apptainer:"
          find ~/.apptainer -name "*.sif" 2>/dev/null | head -10 || echo "No .sif files found"
          
          # Count cached files
          cached_files=$(find ~/.apptainer -name "*.sif" 2>/dev/null | wc -l)
          echo "Total cached container files available: $cached_files"

      - name: Run SeqNado pipeline test for ${{ matrix.assay }}
        shell: bash -el {0}
        env:
          TMPDIR: /tmp
          SEQNADO_CONFIG: "${{ github.workspace }}/tests/genome_config.json"
          APPTAINER_CACHEDIR: "$HOME/.apptainer/cache"
        run: |
          python -m pytest tests/test_pipelines.py::test_pipeline[${{ matrix.assay }}] -vv -s --cores 4