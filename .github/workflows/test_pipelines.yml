name: Python package

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      update_cache:
        description: 'Force update Singularity image cache'
        required: false
        default: 'false'

jobs:
  prepare-images:
    runs-on: ubuntu-latest
    env:
      APPTAINER_CACHEDIR: ${{ github.workspace }}/apptainer-cache
      UPDATE_SINGULARITY_CACHE: ${{ github.event.inputs.update_cache }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.4
      - name: Configure Sylabs remote
        run: |
          apptainer remote add --no-login SylabsCloud cloud.sylabs.io || true
          apptainer remote use SylabsCloud
      - name: Cache Apptainer images
        id: cache-singularity
        uses: actions/cache@v3
        with:
          path: ${{ env.APPTAINER_CACHEDIR }}
          key: apptainer-cache-${{ hashFiles('**/*.sif') }}
          restore-keys: |
            apptainer-cache-
      - name: Pull all required images
        if: steps.cache-singularity.outputs.cache-hit != 'true' || env.UPDATE_SINGULARITY_CACHE == 'true'
        run: |
          mkdir -p "$APPTAINER_CACHEDIR"
          images=(
            library://asmith151/seqnado/seqnado_pipeline:latest
            library://asmith151/seqnado/seqnado_extra:latest
            library://asmith151/seqnado/seqnado_report:latest
            library://cchahrou/seqnado/seqnado_meth.sif:latest
            library://asmith151/lanceotron/lanceotron-mcc:latest
            library://asmith151/seqnado/seqnado_mcc:latest
          )
          for img in "${images[@]}"; do
            APPTAINER_CACHEDIR="$APPTAINER_CACHEDIR" apptainer pull $img
          done

  setup-env:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.pkg_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup and populate environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: testing.yml
          miniforge-version: latest
          auto-activate-base: true

      - name: Install package into env
        run: pip install .

      - name: Capture package version
        id: pkg_version
        run: |
          echo "version=$(seqnado atac --version | tr -d '\n')" >> $GITHUB_OUTPUT

      - name: Cache full conda environment
        uses: actions/cache@v3
        with:
          path: ~/.conda/envs/base
          key: conda-env-full-${{ steps.pkg_version.outputs.version }}
          restore-keys: |
            conda-env-full-

  Test:
    needs: [prepare-images, setup-env]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ["config", "design", "pipeline"]
        assay: ["atac", "chip-rx", "chip", "rna-rx", "rna", "snp", "cat", "meth", "mcc"]
    env:
      APPTAINER_CACHEDIR: ${{ github.workspace }}/apptainer-cache

    steps:
      - uses: actions/checkout@v3

      - name: Download Apptainer cache
        if: matrix.test == 'pipeline'
        uses: actions/cache@v3
        with:
          path: ${{ env.APPTAINER_CACHEDIR }}
          key: apptainer-cache-${{ hashFiles('**/*.sif') }}
          restore-keys: |
            apptainer-cache-

      - name: Restore full conda environment
        uses: actions/cache@v3
        with:
          path: ~/.conda/envs/base
          key: conda-env-full-${{ needs.setup-env.outputs.pkg_version }}
          restore-keys: |
            conda-env-full-

      - name: Activate environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true

      - name: Configure Sylabs remote
        if: matrix.test == 'pipeline'
        run: |
          apptainer remote add --no-login SylabsCloud cloud.sylabs.io || true
          apptainer remote use SylabsCloud

      - name: Run pytest
        shell: bash
        env:
          TMPDIR: /tmp
          SEQNADO_CONFIG: ${{ github.workspace }}/tests/genome_config.json
        run: |
          pytest tests/test_pipelines.py::test_${{ matrix.test }}[${{ matrix.assay }}] -vv -s --cores 4
