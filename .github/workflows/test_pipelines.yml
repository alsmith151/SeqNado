name: Python package

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache conda environment
        uses: actions/cache@v3
        id: cache-conda
        with:
          path: ~/miniconda3/envs/test
          key: ${{ runner.os }}-conda-${{ matrix.python-version }}-${{ hashFiles('**/testing.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ matrix.python-version }}-

      - name: Set up conda
        if: steps.cache-conda.outputs.cache-hit != 'true'
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: testing.yml
          miniforge-version: latest
          miniforge-variant: Mambaforge
          python-version: ${{ matrix.python-version }}
          use-mamba: true

      - name: Create environment
        if: steps.cache-conda.outputs.cache-hit != 'true'
        run: |
          mamba env update -n test -f testing.yml
          pip install .
        shell: bash -l {0}

      - name: Save environment
        if: steps.cache-conda.outputs.cache-hit != 'true'
        run: |
          tar -czf test_env.tar.gz -C /home/runner/miniconda3/envs/test .
      - uses: actions/upload-artifact@v3
        if: steps.cache-conda.outputs.cache-hit != 'true'
        with:
          name: test_env
          path: test_env.tar.gz

  test_config_generation:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-case: ["atac", "chip-rx", "chip", "rna-rx", "rna", "snp"]
    steps:
      - uses: actions/checkout@v3

      - name: Download environment
        if: needs.setup.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        with:
          name: test_env
          path: .

      - name: Extract environment
        if: needs.setup.outputs.cache-hit != 'true'
        run: |
          mkdir -p /home/runner/miniconda3/envs/test
          tar -xzf test_env.tar.gz -C /home/runner/miniconda3/envs/test .
        shell: bash -l {0}

      - name: Add environment to PATH from cache
        run: |
          echo "export PATH=/home/runner/miniconda3/envs/test/bin:$PATH" >> $GITHUB_ENV
          /home/runner/miniconda3/envs/test/bin/seqnado chip --version
        shell: bash -l {0}

      - name: Run test_config_generation
        run: |
          pytest "tests/test_pipelines.py::test_config_generation[${{ matrix.test-case }}]" -vv -s --cores 4 -k
        shell: bash -l {0}
