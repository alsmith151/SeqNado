import os
import sys
import shutil
from datetime import datetime
import glob
from snakemake.utils import min_version
import seqnado.utils
import pandas as pd
import pathlib



ASSAY = "ChIP"
configfile: "config_chip.yml"
container: "library://asmith151/seqnado/seqnado_pipeline:latest"

seqnado.utils.format_config_dict(config)

# Get experiment design
if os.path.exists(config["design"]):
    # Expect columns - sample fq1 fq2 antibody control
    FASTQ_SAMPLES = seqnado.utils.ChipseqFastqSamples(
        pd.read_csv(config["design"], sep="[\s+,\t]", engine="python")
    )
    assert FASTQ_SAMPLES.design.shape[0] > 0, "No samples found in design file"

    for col in ["sample", "fq1", "fq2", "antibody", "control"]:
        assert col in FASTQ_SAMPLES.design.columns, f"Design file must contain columns sample, fq1, fq2, antibody, control. Columns found: {FASTQ_SAMPLES.design.columns}"

else:
    # Use pattern matching to get samples
    fq_files = list(seqnado.utils.get_fastq_files("."))
    if fq_files:
        FASTQ_SAMPLES = seqnado.utils.ChipseqFastqSamples.from_files(fq_files)
    else:
        raise ValueError("No FASTQ files found in the working directory")
    

assert seqnado.utils.has_bowtie2_index(config["genome"].get("indicies_spikein", "")), f"Spike-in genome index not found at {config['genome'].get('indicies_spikein', '')}"

DESIGN = FASTQ_SAMPLES.design
ANTIBODIES = FASTQ_SAMPLES.antibodies
SAMPLE_NAMES = FASTQ_SAMPLES.sample_names_all
SAMPLE_NAMES_IP = FASTQ_SAMPLES.sample_names_ip
SAMPLE_NAMES_CONTROL = FASTQ_SAMPLES.sample_names_control
SAMPLE_NAMES_PAIRED = FASTQ_SAMPLES.paired_ip_and_control

include: "rules/qc.smk"
include: "rules/fastq_trim.smk"
include: "rules/align.smk"
include: "rules/alignment_post_processing.smk"
include: "rules/align_spikein.smk"
include: "rules/peak_call.smk"
include: "rules/pileup.smk"
include: "rules/heatmap.smk"
include: "rules/hub.smk"
include: "rules/normalisation.smk"


ruleorder: deeptools_make_bigwigs_norm > deeptools_make_bigwigs > homer_make_bigwigs_norm > homer_make_bigwigs

ANALYSIS_OUTPUT = seqnado.utils.define_output_files(sample_names=SAMPLE_NAMES,
                                            assay=ASSAY,
                                            sample_names_ip=SAMPLE_NAMES_IP,
                                            **config
                                            )
# Add normalisation factors to output
ANALYSIS_OUTPUT.append("seqnado_output/normalisation_factors.json")



rule all:
    input:
        ANALYSIS_OUTPUT


onsuccess:
    slurm_files = glob.glob("slurm-*.out")
    sps_files = glob.glob("sps-*")

    for fn in [*slurm_files, *sps_files]:
        try:
            if not os.path.isdir(fn):
                os.remove(fn)
            else:
                shutil.rmtree(fn)

        except Exception as e:
            print(e)

onerror:
    log_out = "seqnado_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
