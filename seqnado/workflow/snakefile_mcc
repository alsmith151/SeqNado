from datetime import datetime
import glob
import os
import shutil
import sys

import pandas as pd
from snakemake.utils import min_version


from seqnado.design import Design, NormGroups, MCCOutput
from seqnado.helpers import format_config_dict, symlink_fastq_files, remove_unwanted_run_files, extract_viewpoints, viewpoint_to_grouped_viewpoint


####################
# Hardcoded config #
####################

ASSAY = "MCC"
SCALE_RESOURCES = float(os.environ.get("SCALE_RESOURCES", "1"))
configfile: "config_mcc.yml"
container: "library://asmith151/seqnado/seqnado_pipeline:latest"


####################
# Experiment config #
####################

# Load config
format_config_dict(config)

# Generate design
if os.path.exists(config["design"]):
    df = pd.read_csv(config["design"], sep=r"\s+|,|\t", engine="python").fillna("")
    DESIGN = Design.from_dataframe(df)
else:
    DESIGN = Design.from_directory(".")

# Attempt to symlink the fastq files
assert len(DESIGN.fastq_paths) > 0, "No fastq files found in the working directory or no design file provided."
symlink_fastq_files(DESIGN, output_dir="seqnado_output/fastqs")


# Define global variables
SAMPLE_NAMES = DESIGN.sample_names
VIEWPOINT_OLIGOS = extract_viewpoints(config["viewpoints"])
VIEWPOINT_TO_GROUPED_VIEWPOINT = viewpoint_to_grouped_viewpoint(VIEWPOINT_OLIGOS)
GROUPED_VIEWPOINT_OLIGOS = list(set(VIEWPOINT_TO_GROUPED_VIEWPOINT.values()))

OUTPUT = MCCOutput(
    assay=ASSAY,
    config=config,
    run_design=DESIGN,
    sample_names=SAMPLE_NAMES,
    viewpoint_oligos=VIEWPOINT_OLIGOS,
    viewpoints_grouped=GROUPED_VIEWPOINT_OLIGOS,
    **config
)


# Wilcard constraints
wildcard_constraints:
    sample="|".join(SAMPLE_NAMES),
    viewpoint="|".join([*VIEWPOINT_OLIGOS,  *GROUPED_VIEWPOINT_OLIGOS]),



###################
# Pipeline config #
###################

include: "rules/common.smk"
include: "rules/fastq_trim.smk"
include: "rules/fastq_custom_rules.smk"
include: "rules/align.smk"
include: "rules/alignment_post_processing.smk"
include: "rules/pileup_default.smk"
include: "rules/qc.smk"
include: "rules/hub.smk"
include: "rules/mcc.smk"



rule all:
    input:
        OUTPUT.files

onsuccess:
    remove_unwanted_run_files()

onerror:
    log_out = "seqnado_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
    remove_unwanted_run_files()


