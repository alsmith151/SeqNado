import os
import sys
import shutil
from datetime import datetime
import glob
from snakemake.utils import min_version
import seqnado.utils as utils
import pandas as pd

min_version("6.10")

start_time = datetime.now()
ASSAY = "RNA"

configfile: "config_rna.yml"

container: "library://asmith151/ngs-pipeline/ngs:latest"


utils.format_config_dict(config)
pipeline_tools = utils.get_pipeline_tools(config, assay=ASSAY)

# Methods to use
pm = config["pileup_method"]
if isinstance(pm, str):
    PILEUP_METHODS = [pm]
elif isinstance(pm, tuple):
    PILEUP_METHODS = itertools.chain.from_iterable(pm)
elif isinstance(pm, list):
    PILEUP_METHODS = pm
else:
    raise ValueError("Pileup method must be a string or list of strings")


# Get dataframe of samples
if os.path.exists(config["design"]):
    # Expect columns - sample fq1 fq2
    RNA_SAMPLES = utils.GenericFastqSamples(
        pd.read_csv(config["design"], sep="[\s+,\t]", engine="python")
    )

else:
    # Use pattern matching to get samples
    fq_files = list(utils.get_fastq_files("."))
    if fq_files:
        RNA_SAMPLES = utils.GenericFastqSamples.from_files(fq_files)
    else:
        raise ValueError("No FASTQ files found in the working directory")


RNA_SAMPLES.symlink_fastq_files(outdir="fastq")
DESIGN = RNA_SAMPLES.design
FASTQ_FILES = RNA_SAMPLES.fastq_files
SAMPLE_NAMES = RNA_SAMPLES.sample_names_all


include: "rules/qc.smk"
include: "rules/fastq_trim.smk"
include: "rules/align_rna.smk"
include: "rules/alignment_post_processing.smk"
include: "rules/alignment_counts.smk"
include: "rules/pileup_rna.smk"
include: "rules/hub_rna.smk"


rule all:
    input:
        mutiqc_full="qc/full_qc_report.html",
        read_counts = "feature_counts/read_counts.tsv",

        bams=expand(
            "aligned/{sample}.bam",
            sample=SAMPLE_NAMES,
        ),

        pileups=expand(
            "bigwigs/{method}/{sample}_{strand}.bigWig",
            sample=SAMPLE_NAMES,
            method=PILEUP_METHODS,
            strand=["plus", "minus"]
        ),

        hub=os.path.join(
            config["ucsc_hub_details"]["directory"],
            f"{config['ucsc_hub_details']['name']}.hub.txt",
        ),


onsuccess:
    slurm_files = glob.glob("slurm-*.out")
    sps_files = glob.glob("sps-*")

    for fn in [*slurm_files, *sps_files]:
        try:
            if not os.path.isdir(fn):
                os.remove(fn)
            else:
                shutil.rmtree(fn)

        except Exception as e:
            print(e)

onerror:
    log_out = "seqnado_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
