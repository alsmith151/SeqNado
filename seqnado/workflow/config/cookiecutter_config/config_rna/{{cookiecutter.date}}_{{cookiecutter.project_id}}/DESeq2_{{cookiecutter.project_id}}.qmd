---
title: "RNA-Seq - DESeq2 - {{cookiecutter.project_name}}"
author: "{{cookiecutter.user_name}} {{cookiecutter.email}}"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    toc-location: left
    embed-resources: true
    theme: cosmo 
    highlight-style: github-dark
    number-sections: true
---

```{r setup, include=F}
knitr::opts_chunk$set(
	echo = TRUE,
	fig.align = "center",
	fig.height = 6,
	fig.width = 8,
	message = FALSE,
	warning = FALSE,
	cache = TRUE,
	cache.lazy = FALSE,
  results = 'asis'	
)

suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggrepel))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(DESeq2))
suppressPackageStartupMessages(library(circlize))
suppressPackageStartupMessages(library(qvalue))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(clusterProfiler))
```

# Sample Information {.tabset}

```{r sample_information}
sample_info <- read.csv("design.csv", stringsAsFactors = T)
sample_info <- sample_info[,colnames(sample_info)[!grepl("fq", colnames(sample_info))]]
sample_info$deseq2 <- relevel(sample_info$deseq2, ref = "control")
sample_info <- sample_info[order(sample_info$deseq2),]
sample_info$group <- do.call(paste, 
                              c(sample_info[,!colnames(sample_info) %in%
                                             c("sample", "replicate", "deseq2" )], 
                                sep="_"))
sample_info$sample_name <- do.call(paste, 
                              c(sample_info[,c("cell", "condition", "replicate")], 
                                sep="_"))

group_level <- unique(sample_info$group)
sample_info$group <- factor(sample_info$group, levels = group_level)
kable(sample_info, row.names = F, align = "c", "simple")
```

# DE analysis - DESeq2 {.tabset}

```{r DEseq2}
counts <- read.delim("seqnado_output/feature_counts/read_counts.tsv", comment.char = "#")
colnames(counts) <- gsub("(seqnado_output.aligned.)(.+)(.bam)", "\\2", colnames(counts))
rownames(counts) <- counts$Geneid
counts <- counts[,colnames(counts) %in% sample_info$sample]
colnames(counts) <- sample_info$sample_name
counts <- counts[rowSums(counts)>0, ]
write.csv(counts, "gene_counts.csv")

dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = sample_info,
                              design = ~ group)

dds <- DESeq(dds, quiet = T)
rlogged2 <- suppressMessages(rlog(dds))

de_dir <- "seqnado_output/deseq2_results/"
unlink(de_dir, recursive = T)
dir.create(de_dir)

res_names <- resultsNames(dds)[-1] 
res <- results(dds, name = res_names)

normCounts <- counts(dds, normalized = T)
outname_cnts <- paste0(de_dir,"DEseq2_", res_names, "_normalised_counts.csv")
write.csv(normCounts, outname_cnts, row.names = F)

mean_normCounts <- data.frame(gene = rownames(normCounts))
for (i in 1:length(levels(sample_info$group))) {
  ind_group <- levels(sample_info$group)[i]
  group_info <- sample_info[sample_info$group==ind_group, ]
  sam_names <- as.character(group_info$sample_name)
  sub_mean <- data.frame(mean = apply(normCounts[, colnames(normCounts) %in% sam_names], 1, mean))
  colnames(sub_mean)[1] <- paste0("mean_", unique(group_info$group))
  sub_mean$gene <- rownames(sub_mean)
  mean_normCounts <- merge(mean_normCounts, sub_mean)
}

DE_results <- as.data.frame(res)
DE_results$gene <- rownames(DE_results)
DE_results_full <- merge(DE_results, mean_normCounts)
DE_results_full <- DE_results_full[order(DE_results_full$padj), ]
outname <- paste0(de_dir,"DEseq2_", res_names, ".csv")
write.csv(DE_results_full, outname, row.names = F)
DE_results <- DE_results[!is.na(DE_results$padj), ]

# pre-ranked for GSEA
resrnk <- DE_results[!duplicated(DE_results$gene), c("gene", "stat")]
outrnk <- paste0(de_dir,"DEseq2_",res_names, "_gsea_preranked.rnk")
write.table(resrnk, file=outrnk, quote=F, row.names = F, col.names = F, sep="\t")

```

::: {.panel-tabset}

## Sample distance matrix {.tabset}

Normalisation was performed in DESeq2 and data rlog transformed to allow for visualisation.

```{r distance_matrix}
rlogcount <- assay(rlogged2)
sampleDists <- as.matrix(dist(t(rlogcount)))

cond_col <- c(brewer.pal(4, "Paired"))
cond_col <- cond_col[c(2,4)]
names(cond_col) <- unique(sample_info$group)
row_ha = rowAnnotation(group = sample_info$group,
                       col = list(group = cond_col))
col_ha = HeatmapAnnotation(group = sample_info$group,
                       col = list(group = cond_col))
set.seed(123)
HM_sampleDists <- Heatmap(sampleDists, 
                          top_annotation = col_ha,
                          left_annotation = row_ha,
                          row_title = NULL,
                          show_row_names = T,
                          cluster_rows = T,
                          column_title = NULL, 
                          show_column_names = F,
                          cluster_columns = T,
                          show_heatmap_legend = FALSE,
                          col=colorRamp2(c(0, max(sampleDists)), c("black", "white")))

draw(HM_sampleDists, merge_legend = TRUE)
```

## Overview by PCA {.tabset}

Normalisation was performed in DESeq2 and data rlog transformed to allow for visualisation.

```{r pca}
pcaData <- plotPCA(rlogged2, intgroup=c("group"), returnData=T)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=group)) + 
  geom_point(size = 2) + 
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) +
  geom_label_repel(aes(label = name, fill = group), color = "white", size=3,show.legend = F) +
  ggtitle("PCA - PC1 vs PC2") +
  theme_light() 
```

## Histogram of p-values

```{r pvalues, results='markup'}
ggplot(DE_results, aes(pvalue)) +
  geom_histogram(binwidth = 0.01, fill="lightblue") +
  scale_x_continuous(expand = c(0, 0),) + 
  scale_y_continuous(expand = c(0, 0),) + 
  ggtitle(paste0("DESeq2 - ", res_names," - pvalues")) +
  theme_light() 

qobj <- qvalue(p = DE_results$pvalue)
summary(qobj)

```

:::

# DE results - DESeq2 {.tabset}

::: {.panel-tabset}

## Number of DE genes

```{r DE_genes}
DEsummary <- DE_results %>% dplyr::summarise(
  'log2FC>0_0.05' = sum(padj < 0.05 & log2FoldChange >0),
  'log2FC<0_0.05' = sum(padj < 0.05 & log2FoldChange <0),
  'log2FC>0_0.01' = sum(padj < 0.01 & log2FoldChange >0),
  'log2FC<0_0.01' = sum(padj < 0.01 & log2FoldChange <0),
  'log2FC>0_0.001' = sum(padj < 0.001 & log2FoldChange >0),
  'log2FC<0_0.001' = sum(padj < 0.001 & log2FoldChange <0),
  'log2FC>1_0.05' = sum(padj < 0.05 & log2FoldChange >0 & abs(log2FoldChange) >1),
  'log2FC<1_0.05' = sum(padj < 0.05 & log2FoldChange <0 & abs(log2FoldChange) >1),
  'log2FC>1_0.01' = sum(padj < 0.01 & log2FoldChange >0 & abs(log2FoldChange) >1),
  'log2FC<1_0.01' = sum(padj < 0.01 & log2FoldChange <0 & abs(log2FoldChange) >1),
  'log2FC>1_0.001' = sum(padj < 0.001 & log2FoldChange >0 & abs(log2FoldChange) >1),
  'log2FC<1_0.001' = sum(padj < 0.001 & log2FoldChange <0 & abs(log2FoldChange) >1),
  'log2FC>2_0.05' = sum(padj < 0.05 & log2FoldChange >0 & abs(log2FoldChange) >2),
  'log2FC<2_0.05' = sum(padj < 0.05 & log2FoldChange <0 & abs(log2FoldChange) >2),
  'log2FC>2_0.01' = sum(padj < 0.01 & log2FoldChange >0 & abs(log2FoldChange) >2),
  'log2FC<2_0.01' = sum(padj < 0.01 & log2FoldChange <0 & abs(log2FoldChange) >2),
  'log2FC>2_0.001' = sum(padj < 0.001 & log2FoldChange >0 & abs(log2FoldChange) >2),
  'log2FC<2_0.001' = sum(padj < 0.001 & log2FoldChange <0 & abs(log2FoldChange) >2))

DEsummary$comparison <- res_names
DEsummary_long <- pivot_longer(DEsummary, cols = starts_with("log"), values_to = "count")
DEsummary_long <- separate(DEsummary_long, col = name, 
                           into = c("log2FoldChange", "pvalue"), 
                           sep = "_")

DEsummary_long$FoldChange_threshold <- gsub("[>|<]", "_", DEsummary_long$log2FoldChange)
DEsummary_long$FC_direction <- gsub("(log2FC)([>|<])(\\d)", "\\2", DEsummary_long$log2FoldChange)
DEsummary_long[DEsummary_long$FC_direction =="<",]$count <- DEsummary_long[DEsummary_long$FC_direction =="<",]$count *-1

ggplot(DEsummary_long, aes(x=pvalue, y=count, fill=FoldChange_threshold, group=FoldChange_threshold)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_hline(yintercept=0, color = "grey") +
  ggtitle(paste("DE genes -", res_names)) + 
  theme_light() 

```

## Top 100 DE genes

For full DESeq2 results see:

`seqnado_output/deseq2_results/DEseq2_group_SEM_MENi_vs_SEM_DMSO.csv`

```{r DE_genes_table}
DE_results_padj0.05 <- DE_results_full[1:100,]
DE_results_padj0.05 <- data.frame(lapply(DE_results_padj0.05,
                                         function(y) if(is.numeric(y)) signif(y, 5) else y)) 


datatable(DE_results_padj0.05, 
          caption = res_names, 
          rownames = DE_results_padj0.05$gene, 
          filter = 'top')
```

## Column description

```{r columns}
kable(data.frame(column = colnames(DE_results_padj0.05[,c(2:7)]), description = mcols(res)$description))
```

:::

# Plots {.tabset}

::: {.panel-tabset}

## Heatmap - DE genes

DE significant genes p-adj \< 0.05

```{r heatmap}
DE_results_sig <- DE_results[DE_results$padj < 0.05,]
DEmat <- as.data.frame(normCounts)
DEmat$gene <- rownames(DEmat)
DEmat <- DEmat[DEmat$gene %in% DE_results_sig$gene,]
rownames(DEmat) <- DEmat$gene
DEmat <- DEmat[,!grepl("gene", colnames(DEmat))]

# z-score
DEmat <- as.matrix(t(scale(t(DEmat))))

cond_col <- c(brewer.pal(4, "Paired"))
cond_col <- cond_col[c(2,4)]
names(cond_col) <- unique(sample_info$group)
HA = HeatmapAnnotation(group = sample_info$group,
                       col = list(group = cond_col))

# heatmap
set.seed(123)
DEheatmap <- Heatmap(DEmat,
                     top_annotation = HA,
                     cluster_rows = T,
                     show_row_names=F,
                     show_row_dend = FALSE,
                     show_column_names = FALSE,
                     show_column_dend = FALSE,
                     cluster_columns = T,
                     column_split = sample_info$group,
                     col <- colorRamp2(seq(1.5, -1.5, length = 11), 
                                       rev(brewer.pal(n = 11, name = "RdBu"))),
                     heatmap_legend_param = list(title = "Relative Expression \n(Row z-score)",
                                                 title_position = "topcenter",
                                                 direction = "horizontal"))

draw(DEheatmap, heatmap_legend_side = "bottom", annotation_legend_side = "right")

```

## Unsupervised hierarchical clustering of DE genes {.tabset}

DE significant genes p-adj \< 0.05

```{r heatmap_cluster}
set.seed(123)
DEheatmap <- Heatmap(DEmat,
                     top_annotation = col_ha,
                     cluster_rows = T,
                     show_row_names=F,
                     show_row_dend = T,
                     show_column_names = T,
                     cluster_columns = T,
                     # row_km = 2,
                     col <- colorRamp2(seq(1.5, -1.5, length = 11),
                                       brewer.pal(n = 11, name = "RdBu")),
                     heatmap_legend_param = list(title = "Relative Expression \n(Row z-score)",
                                               title_position = "topcenter",
                                               direction = "horizontal"))

draw(DEheatmap, heatmap_legend_side = "bottom", annotation_legend_side = "right")
  
```

## Volcano plot

labelled - 5 top (by padj) upregulated and downregulated significant DE genes p-adj \< 0.05

```{r volcano}
colors <- c("#0072B2", "#D55E00",  "grey")
names(colors) <- c("Down", "Up", "NotSig")

res4plot <- DE_results[,c("gene", "log2FoldChange", "padj") ]
res4plot$DE <- ifelse(res4plot$padj < 0.05, ifelse(res4plot$log2FoldChange < 0, "Down", "Up"), "NotSig")
res4plot <- res4plot[order(res4plot$padj),]
label_list <- NULL
for (c in c("Up", "Down")) {
  res4plot_ind <- res4plot[res4plot$DE==c,]
  label_list <- append(label_list,res4plot_ind[1:5,1])
}
res4plot$label <- ifelse(res4plot$gene %in% label_list, "label", NA)
res4plot$label <- res4plot$gene[res4plot$label == "label"]

# res4plot$label <- NA
# res4plot$label[1:5] <- res4plot$gene[1:5]
maxLFC <- max(abs(res4plot$log2FoldChange))
maxpadj <- max(abs(-log10(res4plot$padj)))

g <- ggplot(data=res4plot, aes(x=log2FoldChange, y=-log10(padj), col=DE, label=label)) +
  geom_point(size=1) +
  theme_minimal() +
  geom_label_repel(aes(label = label), show.legend = F) +
  scale_colour_manual(values = colors) +
  geom_vline(xintercept=0, linetype='dotted', col="black") +
  geom_hline(yintercept=-log10(0.05), linetype='dotted', col="black") +
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value") +
  xlim(-maxLFC, maxLFC) +
  ylim(0, maxpadj) +
  ggtitle(paste(res_names))
print(g)


```

## MA plot

labelled - 5 top (by logFC) upregulated and downregulated significant DE genes p-adj \< 0.05

```{r MA_plot}
colors <- c("#0072B2", "#D55E00",  "grey")
names(colors) <- c("Down", "Up", "NotSig")

res4MAplot <- DE_results[,c("gene", "baseMean", "log2FoldChange", "padj") ]
res4MAplot$significant <- ifelse(res4MAplot$padj < 0.05, 
                                 ifelse(res4MAplot$log2FoldChange < 0, "Down", "Up"),
                                 "NotSig")
res4MAplot <- res4MAplot[order(abs(res4MAplot$log2FoldChange), decreasing = T),]
label_list <- NULL
for (c in c("Up", "Down")) {
  res4MAplot_ind <- res4MAplot[res4MAplot$significant==c,]
  label_list <- append(label_list,res4MAplot_ind[1:5,1])
}
res4MAplot$label <- ifelse(res4MAplot$gene %in% label_list, "label", NA)
res4MAplot$label <- res4plot$gene[res4MAplot$label == "label"]

g <- ggplot(res4MAplot, aes(baseMean, log2FoldChange, colour=significant, label=label)) + 
  geom_point(size=1) + 
  theme_minimal() +
  geom_label_repel(aes(label = label), show.legend = F) +
  scale_colour_manual(values = colors) +
  geom_hline(yintercept = 0, linetype='dotted', col="black") + 
  labs(x="mean of normalized counts", y="log2 fold change") + 
  # scale_y_continuous(limits=c(-4, 4)) +
  scale_x_log10() +
  ggtitle(res_names)

print(g)


```

:::

# Top 12 DE genes {.tabset}

```{r top_DEgenes}
DE_results<- DE_results[order(DE_results$padj),]

top_DE_genes <- as.data.frame(normCounts)
top_DE_genes$gene <- rownames(top_DE_genes)
top_DE_genes <- top_DE_genes[top_DE_genes$gene %in% DE_results[1:12,]$gene,]
top_DE_genes <- pivot_longer(top_DE_genes, cols = sample_info$sample_name, values_to = "count", names_to = "sample_name")
top_DE_genes <- merge(sample_info,top_DE_genes)

p <- ggplot(data=top_DE_genes, aes(x=group, y=count, col=group)) +
    geom_boxplot() +
    geom_point(position=position_jitter(w=0.1,h=0)) +
    # geom_label_repel(aes(label = sample), show.legend = F) +
    theme_light() +
    ylab("Normalised Count") +
    facet_wrap(gene~.) +
    ggtitle(res_names)
print(p)

```

# Session Info

```{r session_info, results='markup'}
sessionInfo()
```
