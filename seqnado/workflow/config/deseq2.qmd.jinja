---
title: "RNA-Seq - DESeq2 - {{project_name}}"
author: "{{username}}"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    toc-location: left
    embed-resources: true
    theme: cosmo 
    highlight-style: github-dark
    number-sections: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=F}
knitr::opts_chunk$set(
	echo = TRUE,
	fig.align = "center",
	fig.height = 6,
	fig.width = 8,
	message = FALSE,
	warning = FALSE,
	cache = FALSE,
	cache.lazy = FALSE,
  results = 'asis'	
)

suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggrepel))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(DESeq2))
suppressPackageStartupMessages(library(circlize))
suppressPackageStartupMessages(library(qvalue))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(clusterProfiler))
suppressPackageStartupMessages(library(org.Hs.eg.db))
suppressPackageStartupMessages(library(msigdbr))
suppressPackageStartupMessages(library(fgsea))
```

# Background {.tabset}

::: panel-tabset

## Sample information

```{r sample_information}
sample_info <- read.csv("design.csv") %>%
  dplyr::select(-contains("fq")) %>%
  mutate(deseq2 = fct_relevel(deseq2, "control")) %>%
  arrange(deseq2)

print(kable(sample_info, align = "l", format = "simple", row.names = FALSE))

```

## Counts

```{r counts}
counts <- read.delim("seqnado_output/feature_counts/read_counts.tsv", comment.char = "#") %>%
  rename_with(~ gsub("(seqnado_output.aligned.)(.+)(.bam)", "\\2", .), everything()) %>%
  column_to_rownames(var = "Geneid") %>%
  dplyr::select(one_of(make.names(sample_info$sample))) %>%
  setNames(sample_info$sample) %>%
  filter(rowSums(.) > 0)

total_counts <- data.frame(
  sample = colnames(counts), 
  total_counts = colSums(counts), 
  mean_counts = colMeans(counts))

print(kable(total_counts, align = "l", format = "simple", row.names = FALSE))

```
:::

# DE analysis - DESeq2 {.tabset}

::: panel-tabset

```{r DEseq2}
de_dir <- "seqnado_output/deseq2_results/"
unlink(de_dir, recursive = T)
dir.create(de_dir)

dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = sample_info,
                              design = ~ deseq2)

dds <- DESeq(dds, quiet = T)
vst <- suppressMessages(vst(dds))

res_names <- resultsNames(dds)[-1]
res <- results(dds, name = res_names)

normCounts <- counts(dds, normalized = TRUE) %>% 
  as_tibble(rownames = "gene")
outname_cnts <- paste0(de_dir, "DEseq2_", res_names, "_normalised_counts.csv")
write.csv(normCounts, outname_cnts, row.names = FALSE)

mean_normCounts <- normCounts %>%
  column_to_rownames("gene") %>% 
  bind_cols(
    map_dfc(levels(sample_info$deseq2), function(ind_group) {
      group_info <- filter(sample_info, deseq2 == ind_group)
      sam_names <- group_info$sample
      sub_mean <- normCounts %>%
        dplyr::select(all_of(sam_names)) %>%
        rowMeans(na.rm = TRUE) %>%
        as_tibble() %>%
        rename(!!paste0("mean_", unique(group_info$deseq2)) := value)
    })
  ) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::select(gene, starts_with("mean"))


DE_results <- as.data.frame(res) %>%
  mutate(gene = rownames(.)) %>%
  inner_join(mean_normCounts, by = "gene") %>%
  filter(!is.na(padj)) %>%
  arrange(padj) 

outname <- paste0(de_dir, "DEseq2_", res_names, ".csv")
write.csv(DE_results, outname, row.names = FALSE)
```

## Sample distance matrix {.tabset}

Normalisation was performed in DESeq2 and data vst transformed to allow for visualisation.

```{r distance_matrix}
vst_count <- assay(vst)
sampleDists <- as.matrix(dist(t(vst_count)))

cond_col <- brewer.pal(3, "Set2")[1:2] %>% 
  set_names(unique(sample_info$deseq2))

row_ha = rowAnnotation(group = sample_info$deseq2,
                       col = list(group = cond_col))
col_ha = HeatmapAnnotation(group = sample_info$deseq2,
                           col = list(group = cond_col))
set.seed(123)
HM_sampleDists <- Heatmap(
  sampleDists, 
  top_annotation = col_ha,
  left_annotation = row_ha,
  row_title = NULL,
  show_row_names = T,
  cluster_rows = T,
  column_title = NULL, 
  show_column_names = F,
  cluster_columns = T,
  show_heatmap_legend = FALSE,
  col=colorRamp2(c(0, max(sampleDists)), c("black", "white"))
)

draw(HM_sampleDists, merge_legend = TRUE)
```

## Overview by PCA

Normalisation was performed in DESeq2 and data vst transformed to allow for visualisation.

```{r pca}
pcaData <- plotPCA(vst, intgroup=c("deseq2"), returnData=T)
percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData, aes(PC1, PC2, color=deseq2)) + 
  geom_point(size = 2) + 
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) +
  geom_label_repel(aes(label = name, fill = deseq2), 
                   color = "white", size=3,show.legend = F) +
  scale_color_manual(values = cond_col) +
  scale_fill_manual(values = cond_col) +
  ggtitle("PCA - PC1 vs PC2") +
  theme_light() 
```

## Histogram of p-values

```{r pvalues, results='markup'}
ggplot(DE_results, aes(pvalue)) +
  geom_histogram(binwidth = 0.01, fill="lightblue") +
  scale_x_continuous(expand = c(0, 0),) + 
  scale_y_continuous(expand = c(0, 0),) + 
  ggtitle(paste0(res_names," - pvalues")) +
  theme_light() 

qobj <- qvalue(p = DE_results$pvalue)
summary(qobj)

```
:::

# DE results - DESeq2 {.tabset}

::: panel-tabset

## Number of DE genes

```{r DE_genes}
DE_summary_fn <- function(df, fcs, pvals) {
  summary_df <- data.frame()
  for (fc in fcs) {
    for (pval in pvals) {
      up_count = sum(df$padj < pval & df$log2FoldChange >  fc)
      down_count = sum(df$padj < pval & df$log2FoldChange < -fc)

      summary_df[1, paste0('log2FC>', fc, '_', pval)] <- up_count
      summary_df[1, paste0('log2FC<', fc, '_', pval)] <- down_count
    }
  }

  summary_df %>%
    pivot_longer(cols = starts_with("log"), values_to = "count") %>%
    separate(col = name, into = c("log2FoldChange", "pvalue"), sep = "_") %>%
    mutate(
      FC_direction = ifelse(str_detect(log2FoldChange, ">"), "up", "down"), 
      FoldChange_threshold = str_extract(log2FoldChange, "(?<=<|>)(\\d+)"), 
      count = ifelse(str_detect(log2FoldChange, ">"), count, -count)
    )
}

fold_changes <- c(0:3)
pvalues <- c(0.05, 0.01, 0.001)
DEsummary <- DE_summary_fn(DE_results, fold_changes, pvalues)

p <- ggplot(DEsummary, aes(x=pvalue, y=count, 
                      fill=FoldChange_threshold,
                      group=FoldChange_threshold)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_hline(yintercept=0, color = "grey") +
  ggtitle(paste("DE genes - LRT")) +
  scale_fill_brewer(palette = "Dark2") +
  theme_light()
print(p)

```

## Top 100 DE genes

```{r DE_genes_table}
DE_results_sig <- DE_results[DE_results$padj < 0.05,]

if (nrow(DE_results_sig) >100) {
  datatable(DE_results_sig[1:100,], 
          caption = res_names, 
          rownames = DE_results_sig[1:100,]$gene, 
          filter = 'top')
} else {
  datatable(DE_results_sig, 
          caption = res_names, 
          rownames = DE_results_sig$gene, 
          filter = 'top')
}

```

## Column description

```{r columns}
kable(
  data.frame(
    column = colnames(DE_results[,c(2:7)]), 
    description = mcols(res)$description
    )
  )
```
:::

# Plots {.tabset}

::: panel-tabset

## Heatmap - DE genes

DE significant genes p-adj \< 0.05

```{r heatmap}
DE_results_sig <- DE_results[DE_results$padj < 0.05,]

DEmat <- normCounts %>%
  as.data.frame() %>%
  filter(gene %in% DE_results_sig$gene) %>%
  dplyr::select(-matches("gene"), everything()) %>%  # Ensure no duplicate 'gene' column
  column_to_rownames(var = "gene") %>%
  t() %>%
  scale() %>%
  t() %>%
  as.matrix()

HA = HeatmapAnnotation(group = sample_info$deseq2,
                       col = list(group = cond_col))
# heatmap
set.seed(123)
DEheatmap <- Heatmap(
  DEmat,
  top_annotation = HA,
  cluster_rows = T,
  show_row_names=F,
  show_row_dend = FALSE,
  show_column_names = FALSE,
  show_column_dend = FALSE,
  cluster_columns = T,
  column_split = sample_info$deseq2,
  col = colorRamp2(
    seq(1.5, -1.5, length = 11), 
    brewer.pal(n = 11, name = "RdBu")),
  heatmap_legend_param = list(
    title = "Relative Expression \n(Row z-score)",
    title_position = "topcenter",
    direction = "horizontal")
)


draw(DEheatmap, heatmap_legend_side = "bottom", annotation_legend_side = "right")

```

## Unsupervised hierarchical clustering of DE genes {.tabset}

DE significant genes p-adj \< 0.05

```{r heatmap_cluster}
set.seed(123)
DEheatmap <- Heatmap(
  DEmat,
  top_annotation = col_ha,
  cluster_rows = T,
  show_row_names=F,
  show_row_dend = T,
  show_column_names = T,
  cluster_columns = T,
  row_km = 2,
  column_km = 2,
  col = colorRamp2(
    seq(1.5, -1.5, length = 11),
    brewer.pal(n = 11, name = "RdBu")),
  heatmap_legend_param = list(
    title = "Relative Expression \n(Row z-score)",
    title_position = "topcenter",
    direction = "horizontal")
)


draw(DEheatmap, heatmap_legend_side = "bottom", annotation_legend_side = "right")
  
```

## Volcano plot

labelled - 5 top (by padj) upregulated and downregulated significant DE genes p-adj \< 0.05

```{r volcano}
colors <- brewer.pal(5, "RdBu")[c(5,1)] %>% 
  append("grey") %>% 
  set_names(c("Down", "Up", "NotSig"))

res4plot <- DE_results %>%
  dplyr::select(gene, log2FoldChange, padj) %>%
  arrange(padj) %>% 
  mutate(
    DE = case_when(
      padj < 0.05 & log2FoldChange < 0 ~ "Down",
      padj < 0.05 & log2FoldChange >= 0 ~ "Up",
      TRUE ~ "NotSig"
    ),
    label = if_else(gene %in% union(
      head(filter(., DE == "Up")$gene, 5),
      head(filter(., DE == "Down")$gene, 5)
    ), gene, as.character(NA))
  ) 
  
maxLFC <- max(abs(res4plot$log2FoldChange))
maxpadj <- max(-log10(res4plot$padj), na.rm = TRUE)

g <- ggplot(data=res4plot, aes(x=log2FoldChange, y=-log10(padj), col=DE, label=label)) +
  geom_point(size=1) +
  theme_minimal() +
  geom_label_repel(aes(label = label), show.legend = F) +
  scale_colour_manual(values = colors) +
  geom_vline(xintercept=0, linetype='dotted', col="black") +
  geom_hline(yintercept=-log10(0.05), linetype='dotted', col="black") +
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value") +
  xlim(-maxLFC, maxLFC) +
  ylim(0, maxpadj) +
  ggtitle(paste(res_names))
print(g)
```

## MA plot

labelled - 5 top (by logFC) upregulated and downregulated significant DE genes p-adj \< 0.05

```{r MA_plot}
res4MAplot <- DE_results %>%
  dplyr::select(gene, baseMean, log2FoldChange, padj) %>%
  arrange(desc(abs(log2FoldChange))) %>%
  mutate(
    significant = case_when(
      padj < 0.05 & log2FoldChange < 0 ~ "Down",
      padj < 0.05 & log2FoldChange >= 0 ~ "Up",
      TRUE ~ "NotSig"
    ),
    label = if_else(gene %in% union(
      head(filter(., significant == "Up")$gene, 5),
      head(filter(., significant == "Down")$gene, 5)
    ), gene, as.character(NA))
  ) 

g <- ggplot(res4MAplot, aes(x = baseMean, y = log2FoldChange, colour = significant, label = label)) +
  geom_point(size = 1) +
  theme_minimal() +
  geom_label_repel(aes(label = label), show.legend = FALSE) +
  scale_colour_manual(values = colors) +
  geom_hline(yintercept = 0, linetype = 'dotted', color = "black") +
  labs(x = "mean of normalized counts", y = "log2 fold change") +
  scale_x_log10() +
  ggtitle(res_names)

print(g)


```

## Top 12 DE genes

```{r top_DEgenes}
top_DE_genes <- normCounts %>%
  as.data.frame() %>%
  filter(gene %in% DE_results$gene[1:12]) %>%
  pivot_longer(
    cols = sample_info$sample, 
    values_to = "count", 
    names_to = "sample"
  ) %>%
  left_join(sample_info, by = "sample") %>%
  mutate(gene = factor(gene, levels = unique(gene)))

p <- ggplot(data = top_DE_genes, aes(x = deseq2, y = count, color = deseq2)) +
    geom_boxplot() +
    geom_point(position = position_jitter(width = 0.1, height = 0)) +
    theme_light() +
    ylab("Normalized Count") +
    scale_color_manual(values = cond_col) +
    facet_wrap(~ gene) +
    ggtitle(res_names)

print(p)
```
:::

# Gene Ontology - Biological Process {.tabset}

::: panel-tabset

## downregulated

```{r go_downreg}
background_genes <- normCounts$gene
bg_gene.df <- bitr(background_genes, fromType = "SYMBOL", 
        toType = c("ENSEMBL", "ENTREZID"), 
        OrgDb = org.Hs.eg.db)
  
down_sig <- DE_results[DE_results$padj < 0.05 & DE_results$log2FoldChange < 0, ]$gene

if (length(down_sig > 0)) {
  gene.df <- bitr(
    down_sig, fromType = "SYMBOL", 
    toType = c("ENSEMBL", "ENTREZID"), 
    OrgDb = org.Hs.eg.db)

  ego_down <- enrichGO(
    gene = gene.df$ENTREZID, 
    OrgDb = org.Hs.eg.db, 
    universe = bg_gene.df$ENTREZID, 
    keyType = 'ENTREZID', 
    ont = "BP", 
    pAdjustMethod = "BH", 
    pvalueCutoff  = 0.05)
  if (nrow(ego_down) > 0) {
    ego_down <- setReadable(ego_down, OrgDb = org.Hs.eg.db)
    print(dotplot(ego_down, showCategory=20))
  }
} else {
  print("No downregulated genes")
  cat("\n \n")
}

```

## upregulated

```{r go_upreg}
up_sig <- DE_results[DE_results$padj < 0.05 & DE_results$log2FoldChange > 0, ]$gene

if (length(up_sig > 0)) {
  gene.df_up <- bitr(
    up_sig, fromType = "SYMBOL", 
    toType = c("ENSEMBL", "ENTREZID"), 
    OrgDb = org.Hs.eg.db)

  ego_up <- enrichGO(
    gene = gene.df_up$ENTREZID, 
    OrgDb = org.Hs.eg.db, 
    universe = bg_gene.df$ENTREZID, 
    keyType = 'ENTREZID', 
    ont = "BP", 
    pAdjustMethod = "BH", 
    pvalueCutoff  = 0.1)
  if (nrow(ego_up) > 0) {
    ego_up <- setReadable(ego_up, OrgDb = org.Hs.eg.db)
    print(dotplot(ego_up, showCategory=20))
  }
} else {
  print("No upregulated genes")
  cat("\n \n")
}


```
:::

# GSEA {.tabset}

::: panel-tabset

## GSEA Summary

```{r gsea}

pathwaysDF <- msigdbr(species = "Homo sapiens", category="H")
pathways <- split(as.character(pathwaysDF$gene_symbol), pathwaysDF$gs_name)

resrnk <- DE_results[!duplicated(DE_results$gene), c("gene", "stat")]
ranks <- as.numeric(resrnk$stat)
names(ranks) <- resrnk$gene

set.seed(123)
gsea_result <- fgsea(
  pathways = pathways, 
  stats = ranks, 
  minSize = 15, 
  maxSize = 500)
  
gsea_result <- gsea_result %>%
  mutate(significant = ifelse(padj < 0.25, "<0.25", ">0.25")) %>%
  arrange(NES)
  
p <- ggplot(gsea_result, aes(x = NES, y = reorder(pathway, NES))) +
  geom_point(aes(size = size, color = padj, shape = significant)) +
  geom_vline(xintercept = 0, colour = "grey") +
  scale_colour_gradient(name = "padj", 
                        low = "#D55E00", high = "#0072B2") +
  scale_shape_manual(values = c(19, 1)) +
  theme_light() +
  theme(axis.text = element_text(size = 8), 
        axis.title = element_text(size = 12, face = "bold"), 
        legend.title = element_text(size = 10), 
        legend.text = element_text(size = 10)) +
  xlim(-4, 4) +
  ylab("Pathway") +
  ggtitle(res_names)
print(p)

```

:::

# Session Info


```{r session_info, results='markup'}
sessionInfo()
```
