from datetime import datetime
import glob
import os
import shutil
import sys

import pandas as pd
from snakemake.utils import min_version


from seqnado.design import Design, SNPOutput, NormGroups
from seqnado.helpers import format_config_dict, symlink_fastq_files, remove_unwanted_run_files


####################
# Hardcoded config #
####################

ASSAY = "SNP"
configfile: "config_snp.yml"
container: "library://asmith151/seqnado/seqnado_pipeline:latest"


####################
# Experiment config #
####################

# Load config
format_config_dict(config)

# Generate design
if os.path.exists(config["design"]):
    df = pd.read_csv(config["design"], sep=r"\s+|,|\t", engine="python").fillna("")
    DESIGN = Design.from_dataframe(df)
else:
    DESIGN = Design.from_directory(".")

# Attempt to symlink the fastq files
assert len(DESIGN.fastq_paths) > 0, "No fastq files found in the working directory or no design file provided."
symlink_fastq_files(DESIGN, output_dir="seqnado_output/fastqs")


# Define global variables
SAMPLE_NAMES = DESIGN.sample_names
OUTPUT = SNPOutput(
    assay=ASSAY,
    run_design=DESIGN,
    sample_names=SAMPLE_NAMES,
    **config
)

NORMALISATION_SCALING = NormGroups.from_design(DESIGN, subset_column="scale_group", include_controls=True)
NORMALISATION_MERGING = NormGroups.from_design(DESIGN, subset_column="merge", include_controls=True)

###################
# Pipeline config #
###################
include: "rules/common.smk"
include: "rules/align.smk"
include: "rules/alignment_post_processing.smk"
include: "rules/fastq_screen.smk"
include: "rules/fastq_trim.smk"
include: "rules/qc.smk"
include: "rules/variant.smk"

rule all:
    input:
        OUTPUT.files

onsuccess:
    remove_unwanted_run_files()

onerror:
    log_out = "seqnado_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
    remove_unwanted_run_files()

