import os
import sys
import shutil
from datetime import datetime
import glob
from snakemake.utils import min_version
import seqnado.utils_chipseq as chip_utils
import seqnado.utils as utils
import pandas as pd

ASSAY = "ChIP"
configfile: "config_chip.yml"
container: "library://asmith151/ngs-pipeline/ngs:latest"

utils.format_config_dict(config)
PILEUP_METHODS = config["pileup_method"]
PEAK_CALL_METHODS = config["peak_calling_method"]

# Get experiment design
if os.path.exists(config["design"]):
    # Expect columns - sample fq1 fq2 antibody control
    FASTQ_SAMPLES = chip_utils.ChipseqFastqSamples(
        pd.read_csv(config["design"], sep="[\s+,\t]", engine="python")
    )
    assert FASTQ_SAMPLES.design.shape[0] > 0, "No samples found in design file"

    for col in ["sample", "fq1", "fq2", "antibody", "control"]:
        assert col in FASTQ_SAMPLES.design.columns, f"Design file must contain columns sample, fq1, fq2, antibody, control. Columns found: {FASTQ_SAMPLES.design.columns}"

else:
    # Use pattern matching to get samples
    fq_files = list(utils.get_fastq_files("."))
    if fq_files:
        FASTQ_SAMPLES = chip_utils.ChipseqFastqSamples.from_files(fq_files)
    else:
        raise ValueError("No FASTQ files found in the working directory")


DESIGN = FASTQ_SAMPLES.design
ANTIBODIES = FASTQ_SAMPLES.antibodies
SAMPLE_NAMES = FASTQ_SAMPLES.sample_names_all
SAMPLE_NAMES_IP = FASTQ_SAMPLES.sample_names_ip
SAMPLE_NAMES_CONTROL = FASTQ_SAMPLES.sample_names_control
SAMPLE_NAMES_PAIRED = FASTQ_SAMPLES.paired_ip_and_control

include: "rules/qc.smk"
include: "rules/fastq_trim.smk"
include: "rules/align.smk"
include: "rules/alignment_post_processing.smk"
include: "rules/peak_call_chip.smk"
include: "rules/pileup.smk"
include: "rules/heatmap.smk"
include: "rules/hub.smk"


rule all:
    input:
        mutiqc_full="seqnado_output/qc/full_qc_report.html",
        pileups=expand(
            "seqnado_output/bigwigs/{method}/{sample}.bigWig",
            sample=SAMPLE_NAMES,
            method=PILEUP_METHODS,
        ),
        heatmap = "seqnado_output/heatmap/heatmap.pdf",
        peaks=expand(
            "seqnado_output/peaks/{method}/{ip}.bed",
        ip=[
        f"{row.sample}_{row.antibody}"
                for row in FASTQ_SAMPLES.design.itertuples()
            ],
            method=PEAK_CALL_METHODS,
        ),
        hub=os.path.join(
            config["ucsc_hub_details"]["directory"],
            f"{config['ucsc_hub_details']['name']}.hub.txt",
        ),


onsuccess:
    slurm_files = glob.glob("slurm-*.out")
    sps_files = glob.glob("sps-*")

    for fn in [*slurm_files, *sps_files]:
        try:
            if not os.path.isdir(fn):
                os.remove(fn)
            else:
                shutil.rmtree(fn)

        except Exception as e:
            print(e)

onerror:
    log_out = "seqnado_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
