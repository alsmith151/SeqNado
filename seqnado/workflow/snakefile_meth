from datetime import datetime
import glob
import os
import shutil
import sys

import pandas as pd
from snakemake.utils import min_version


from seqnado.design import Design, METHOutput, NormGroups
from seqnado.helpers import format_config_dict, symlink_fastq_files, remove_unwanted_run_files


####################
# Hardcoded config #
####################

ASSAY = "METH"
SCALE_RESOURCES = float(os.environ.get("SCALE_RESOURCES", "1"))
configfile: "config_meth.yml"
container: "library://asmith151/seqnado/seqnado_pipeline:latest"


####################
# Experiment config #
####################

# Load config
format_config_dict(config)

# Generate design
if os.path.exists(config["design"]):
    df = pd.read_csv(config["design"], sep=r"\s+|,|\t", engine="python").fillna("")
    DESIGN = Design.from_dataframe(df)
else:
    DESIGN = Design.from_directory(".")

# Attempt to symlink the fastq files
assert len(DESIGN.fastq_paths) > 0, "No fastq files found in the working directory or no design file provided."
symlink_fastq_files(DESIGN, output_dir="seqnado_output/fastqs")


def get_meth_spikein_genomes(config) -> List[str]:
    faidx = config["fasta"] + ".fai"
    if not os.path.exists(faidx):
        raise FileNotFoundError(
            f"Could not find the fasta index file {faidx}. Please create it using samtools faidx."
        )
    chroms = []
    with open(faidx, "r") as f:
        for line in f:
            chroms.append(line.split("\t")[0])

    meth_spikein_genomes = [
        chrom for chrom in chroms if not chrom.startswith("chr")
    ]
    genome_names = config["genome"]["name"]
    if isinstance(genome_names, str):
        genome_names = [genome_names]
    meth_spikein_genomes.extend(genome_names)
    return meth_spikein_genomes

# Define global variables
SAMPLE_NAMES = DESIGN.sample_names
SPIKEIN_GENOMES=get_meth_spikein_genomes(config)


OUTPUT = METHOutput(
    assay=ASSAY,
    config=config,
    run_design=DESIGN,
    sample_names=SAMPLE_NAMES,
    genomes=SPIKEIN_GENOMES,
    **config
)

NORMALISATION_SCALING = NormGroups.from_design(DESIGN, subset_column="scale_group", include_controls=True)
NORMALISATION_MERGING = NormGroups.from_design(DESIGN, subset_column="merge", include_controls=True)

###################
# Pipeline config #
###################
include: "rules/common.smk"
include: "rules/align.smk"
include: "rules/alignment_post_processing.smk"
include: "rules/fastq_screen.smk"
include: "rules/fastq_trim.smk"
include: "rules/qc.smk"
include: "rules/variant.smk"
include: "rules/geo_submission.smk"
include: "rules/meth_calling.smk"

rule all:
    input:
        OUTPUT.files

onsuccess:
    remove_unwanted_run_files()

onerror:
    log_out = "seqnado_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
    remove_unwanted_run_files()

