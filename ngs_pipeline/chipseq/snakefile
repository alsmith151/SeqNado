import os
import sys
from datetime import datetime
import glob
from snakemake.utils import min_version
import ngs_pipeline.chipseq.utils as chip_utils
import ngs_pipeline.utils as utils
import pandas as pd

start_time = datetime.now()
ASSAY = "ChIP"

configfile: "config_chip.yml"
container: "library://asmith151/ngs-pipeline/ngs:latest"


utils.format_config_dict(config)
pipeline_tools = chip_utils.get_pipeline_tools(config)

# Methods to use
PILEUP_METHODS = [method for method in ["deeptools", "homer"] if pipeline_tools[method] == True]
PEAK_CALL_METHODS = [method for method in ["macs", "lanceotron", "homer"] if pipeline_tools[method] == True]

# Convinience function that needs to be corrected
#utils.set_up_chromsizes(config)

# Get dataframe of samples
if os.path.exists(config["design"]):
    # Expect columns - sample 1 2 antibody control
    df_samples = pd.read_csv(config["design"], sep="[\s+,\t]", engine="python")
    
else:
    fq_files = utils.get_fastq_files(".") 
    df_samples = chip_utils.get_sample_dataframe(fq_files)

df_samples["paired"] = (~df_samples[["1", "2"]].isna().any(axis=1))

FASTQ_FILES = [*df_samples["1"].to_list(), *df_samples["2"].to_list()]
SAMPLE_NAMES_NO_READ = [*df_samples["1"]
                                  .str
                                  .replace(r"_?R?[12].fastq.gz", "", regex=True)
                                  .str
                                  .replace(".fastq.gz", "", regex=True)
                                  .unique()
                                  .tolist(),
                        *df_samples["control"]
                                  .dropna()
                                  .unique()
                                  
                        ]


ANTIBODIES = df_samples["antibody"].unique()

include: "../rules/qc.smk"
include: "../rules/read_trimming.smk"
include: "../rules/align.smk"

if config["remove_pcr_duplicates_method"] == "picard":
    include: "../rules/remove_pcr_duplicates_picard.smk"
elif config["remove_pcr_duplicates_method"] == "deeptools":
    include: "../rules/remove_pcr_duplicates_deeptools.smk"
    ruleorder: deeptools_filter_alignments > index_bam 
else:
    include: "../rules/remove_pcr_duplicates_ignore.smk"

include: "../rules/filter_alignments.smk"
include: "../rules/peak_call.smk"
include: "../rules/pileup.smk"
include: "../rules/hub.smk"

rule all:
    input:
        multiqc_fastq_raw = "qc/fastq_qc_raw_report.html",

        trimmed = expand("trimmed/{sample}", sample = FASTQ_FILES),
        multiqc_fastq_trimmed = "qc/fastq_qc_trimmed_report.html",

        aligned = expand("aligned/{sample}.bam", sample = SAMPLE_NAMES_NO_READ),
        multiqc_bam_raw = "qc/bam_raw_qc_report.html",

        aligned_deduplicated = expand("aligned_and_filtered/{sample}.bam", sample = SAMPLE_NAMES_NO_READ),

        multiqc_bam_filtered = "qc/bam_filtered_qc_report.html",
        
        mutiqc_full = "qc/full_qc_report.html",

        pileups = expand("bigwigs/{method}/{sample}.bigWig", sample = SAMPLE_NAMES_NO_READ, method = PILEUP_METHODS),
        peaks = expand("peaks/{method}/{sample}_{antibody}.bed", sample=df_samples["sample"], antibody=df_samples["antibody"], method=PEAK_CALL_METHODS),

        hub = f"{config['ucsc_hub_details']['directory']}/{config['ucsc_hub_details']['name']}.hub.txt",









